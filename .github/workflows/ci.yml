name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Go ----------
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'

      - name: Setup Buf
        uses: bufbuild/buf-setup-action@v1
        with:
          buf-version: latest

      - name: Check protobufs up to date
        run: |
          make proto
          git status --short
          git diff --exit-code

      - name: Go vet & test
        run: make test

      - name: Install grpcurl
        run: go install github.com/fullstorydev/grpcurl/cmd/grpcurl@latest

      # ---------- Rust (core/) ----------
      - name: Rust toolchain (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Cargo fmt/check/test
        working-directory: core
        run: |
          cargo fmt --all -- --check || true
          cargo check
          cargo test -q

      # ---------- Docker Compose E2E ----------
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Compose up
        run: docker compose up -d --build

      - name: Wait for API healthy
        run: |
          for i in {1..60}; do
            if curl -sf http://localhost:8080/healthz >/dev/null; then
              curl -s http://localhost:8080/healthz | jq .
              exit 0
            fi
            sleep 2
          done
          echo "API did not become healthy in time"
          docker compose logs --no-color api || true
          exit 1

      - name: gRPC health check
        run: |
          export PATH="$(go env GOPATH)/bin:$PATH"
          grpcurl -plaintext \
            -import-path api/proto \
            -proto api/proto/qazna/v1/health.proto \
            -d '{}' \
            localhost:19090 \
            qazna.v1.HealthService/Check

      - name: Smoke test (accounts + transfer + list)
        env:
          API_URL: http://localhost:8080
        run: |
          ACC_A=$(curl -s -X POST $API_URL/v1/accounts -H 'Content-Type: application/json' -d '{"currency":"QZN","initial_amount":100000}' | jq -r .id)
          ACC_B=$(curl -s -X POST $API_URL/v1/accounts -H 'Content-Type: application/json' -d '{"currency":"QZN","initial_amount":0}' | jq -r .id)
          echo "A=$ACC_A  B=$ACC_B"

          JSON=$(printf '{"from_id":"%s","to_id":"%s","currency":"QZN","amount":25000}' "$ACC_A" "$ACC_B")
          curl -s -X POST $API_URL/v1/transfers -H 'Content-Type: application/json' -H 'Idempotency-Key: gh-action-1' -d "$JSON" | jq .

          curl -s "$API_URL/v1/ledger/transactions?limit=5" | jq .

      - name: Compose down
        if: always()
        run: docker compose down -v
